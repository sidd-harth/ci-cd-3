pipeline {
    agent any

    tools {
        maven 'M386'
    }

    environment {
        POM_VERSION       = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout", returnStdout: true).trim()
        POM_MAJOR_VERSION = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout |  cut -d. -f1", returnStdout: true).trim()
        POM_MINOR_VERSION = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout |  cut -d. -f2", returnStdout: true).trim()
        POM_PATCH_VERSION = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout |  cut -d. -f3 | cut -d- -f1", returnStdout: true).trim()
        POM_MAVEN_QUALIFIER = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout | cut -d- -f2", returnStdout: true).trim() 
        VERSION_WITHOUT_BUILD_NUMBER = sh(script: "echo ${env.POM_MAJOR_VERSION}.${env.POM_MINOR_VERSION}.${env.POM_PATCH_VERSION}-${env.POM_MAVEN_QUALIFIER}", returnStdout: true).trim()
        VERSION_BUILD_NUMBER = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout | cut -d- -f3", returnStdout: true).trim()
    }

    parameters {
        string( name: 'RELEASE_VERSION', description: 'Hotfix Version to be deployed (e.g. hotfix/1.1.0)' )
        choice( name: 'ENVIRONMENT', choices: "Testing\nProduction", description: 'Environment where Mule Application will be deployed' )
    //    choice( name: 'ASSET_TYPE', choices: "API\nIntegration", description: 'Type of  Mule Application (e.g. API or Integration)' )
    //    string( name: 'API_VERSION', defaultValue: '1.0', description: 'Version of API Instance for pairing with Mule Application (e.g. 1.0)' )
    //    string( name: 'CLIENT_APP', description: 'Name of the Client Application (e.g. Jenkins-Demo-OpenID)' )
    }    

    stages {

        stage('Echo Version') {
            steps {
                echo "POM_MAJOR_VERSION: ${env.POM_MAJOR_VERSION}"
                echo "POM_MINOR_VERSION: ${env.POM_MINOR_VERSION}"
                echo "POM_PATCH_VERSION: ${env.POM_PATCH_VERSION}"
                echo "POM_MAVEN_QUALIFIER: ${env.POM_MAVEN_QUALIFIER}"
                echo "VERSION_WITHOUT_BUILD_NUMBER: ${env.VERSION_WITHOUT_BUILD_NUMBER}"
                echo "VERSION_BUILD_NUMBER: ${env.VERSION_BUILD_NUMBER}"
            }
        }

        stage('Update Incremental Version') {
            steps {
                sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.\\${parsedVersion.nextIncrementalVersion}-\\${parsedVersion.qualifier} versions:commit'
            }
        }

        stage('Push Artefact to Nexus') {
            steps {
                 sh 'echo Push Artefact to Nexus Success'
            }
        } 

        stage('Create HOTFIX Branch') {
            steps {
                //sh "git checkout main"
                sh "sh scripts/create-release-branch.sh"
            }
        }
        
        stage('Commit to Release Branch') {
            steps {
                 sh '''sh scripts/commit-release-branch.sh'''
            }
        } 

        stage('Create Git Tag') {
            environment {
                UPDATED_POM_VERSION = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout", returnStdout: true).trim()
                UPDATED_PATCH_VERSION = sh(script: "mvn help:evaluate -Dexpression='project.version' -q -DforceStdout |  cut -d. -f3 | cut -d- -f1", returnStdout: true).trim()
            }
            steps {
                sh "git checkout ${params.UPDATED_POM_VERSION}.${params.UPDATED_PATCH_VERSION}"
                sh "git tag ${params.UPDATED_POM_VERSION}.${params.UPDATED_PATCH_VERSION}"
                sh "git push origin --tags"
            }
        }        

    }

}
